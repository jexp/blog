.Q1 - Find the most prolific actors
[source,cypher]
----
MATCH (a:Actor)-[:ACTS_IN]->(m:Movie) RETURN a, count(*) ORDER BY count(*) DESC LIMIT 10;
----

//table	

.Q2 - Find actors who have been in at least 20 movies
[source,cypher]
----
MATCH (a:Actor)-[:ACTS_IN]->(m:Movie) WITH a, count(m) AS movie_count WHERE movie_count >= 20 RETURN a, movie_count ORDER BY movie_count DESC;
----

//table

.Q3 - Find the actors with 20+ movies, and the movies in which they acted
[source,cypher]
----
MATCH (a:Actor)-[:ACTS_IN]->(m:Movie) WITH a, collect(m.title) AS movies WHERE length(movies) >= 20 RETURN a, movies ORDER BY length(movies) DESC;
----

//table

.Q4 - Find prolific actors (10+) who have directed at least two films, count films acted in and list films directed
[source,cypher]
----
MATCH (a:Actor)-[:ACTS_IN]->(m:Movie) WITH a, count(m) AS acted WHERE acted >= 10 WITH a, acted MATCH (a:Director)-[:DIRECTED]->(m:Movie) WITH a, acted, collect(m.title) AS directed WHERE length(directed) >= 2 RETURN a.name, acted, directed ORDER BY length(directed) DESC, acted DESC;
----

//table

.Q5 - Rewritten to filter both :Actor and :Director labels up front
[source,cypher]
----
MATCH (a:Actor:Director)-[:ACTS_IN]->(m:Movie) WITH a, count(1) AS acted WHERE acted >= 10 WITH a, acted MATCH (a:Actor:Director)-[:DIRECTED]->(m:Movie) WITH a, acted, collect(m.title) AS directed WHERE length(directed) >= 2 RETURN a.name, acted, directed ORDER BY length(directed) DESC, acted DESC;
----

//table

.Q6 - Using the lowest cardinality label, :Director
[source,cypher]
----
MATCH (a:Director)-[:ACTS_IN]->(m) WITH a, count(m) AS acted WHERE acted >= 10 WITH a, acted MATCH (a)-[:DIRECTED]->(m) WITH a, acted, collect(m.title) AS directed WHERE length(directed) >= 2 RETURN a.name, acted, directed ORDER BY length(directed) DESC, acted DESC;
----

.Q7 - Recommendations including counts, grouping and sorting
[source,cypher]
----
MATCH (u:User {login: 'Michael'})-[:FRIEND]-()-[r:RATED]->(m:Movie) RETURN m.title, avg(r.stars), count(*) ORDER BY AVG(r.stars) DESC, count(*) DESC
----

//table

.Q8 - Ratings by like-minded people
[source,cypher]
----
MATCH (u:User)-[r:RATED]->(m:Movie)<-[r2:RATED]-(likeminded), u-[:FRIEND]-(friend) WHERE r.stars > 3 AND r2.stars >= 3 RETURN likeminded, count(*) ORDER BY count(*) desc LIMIT 10;
----

//table

.Q9 - Actors who played in some movie
[source,cypher]
----
MATCH (m:Movie {title: 'Forrest Gump'})<-[:ACTS_IN]-(a:Actor) RETURN a.name, a.birthplace
----

//table

.Q10 - User-Ratings
[source,cypher]
----
MATCH (u:User {login: 'Michael'})-[r:RATED]->(m:Movie) WHERE r.stars > 3 RETURN m.title, r.stars, r.comment
----

//table

.Q11 - Mutual Friend recommendations
[source,cypher]
----
MATCH (u:User {login: 'Michael'})-[:FRIEND]-(f:Person)-[r:RATED]->(m:Movie) WHERE r.stars > 3 RETURN f.name, m.title, r.stars, r.comment
----

//table

.Q12 - Movie suggestions based on a movie
[source,cypher]
----
MATCH (m:Movie {title: 'The Matrix'})<-[:ACTS_IN]-()-[:ACTS_IN]->(s:Movie) RETURN s.title, count(*) ORDER BY count(*) desc LIMIT 5
----

//table

.Q13 - Co-Actors, sorted by count and some actor name
[source,cypher]
----
MATCH (l:Actor {name: 'Tom Hanks'})-[:ACTS_IN]->(m:Movie)<-[:ACTS_IN]-(c:Actor) RETURN count(*), c.name ORDER BY count(*) desc,c.name limit 20
----

//table